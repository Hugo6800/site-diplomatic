rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction helper pour vérifier l'email
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    // Dossier pour les photos de profil
    match /profile_pictures/{userId}/{fileName} {
      // Lecture : tout le monde peut voir les photos de profil
      allow read: if true;
      
      // Écriture : uniquement le propriétaire avec email vérifié
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isEmailVerified()
        // Vérifier que c'est bien une image
        && request.resource.contentType.matches('image/.*')
        // Limite de taille à 5MB
        && request.resource.size < 5 * 1024 * 1024;
    }

    // Fonction helper pour vérifier si l'utilisateur est admin/journalist
    function isAdminOrJournalist() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist';
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

		function isJournalist() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist';
    }

    function isArticleAuthor(authorName) {
      return isJournalist() && request.auth.token.name == authorName;
    }

    // Articles et leurs statistiques
    match /articles/{articleId} {
      // Tout le monde peut lire les articles
      allow read: if true;
      // Seuls les journalistes peuvent créer/modifier leurs articles
      allow create: if isJournalist() && request.resource.data.authorName == request.auth.token.name;
      allow update: if isArticleAuthor(resource.data.authorName);
      allow delete: if isArticleAuthor(resource.data.authorName);
    }
    
    // Permettre la lecture/écriture pour les utilisateurs authentifiés
    match /users/{userId} {
      // Lecture : autoriser la lecture de son propre document même si email non vérifié
      // Ou permettre aux administrateurs de lire tous les utilisateurs
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Permettre aux administrateurs de lister tous les utilisateurs
      allow list: if request.auth != null && isAdmin();

      // Création : autorisée lors de l'inscription (sans vérification d'email)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Mise à jour : uniquement si l'email est vérifié (sauf admin/journalist)
      // Exceptions : emailVerified et preferences
      // Ou permettre aux administrateurs de modifier tous les utilisateurs
      allow update: if request.auth != null && (
        (request.auth.uid == userId && 
          (isEmailVerified() || isAdminOrJournalist() ||
           (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['emailVerified']) &&
            request.resource.data.emailVerified == request.auth.token.email_verified) ||
           (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['preferences']) &&
            request.resource.data.preferences is map))) ||
        isAdmin()
      );

      // Suppression : uniquement si l'email est vérifié (sauf admin/journalist)
      // Ou permettre aux administrateurs de supprimer n'importe quel utilisateur
      allow delete: if request.auth != null && (
        (request.auth.uid == userId && 
          (isEmailVerified() || 
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist')
        ) ||
        isAdmin()
      );
    }

    // Règles pour la collection articles
    match /articles/{articleId} {
      allow read: if true;  // Tout le monde peut lire les articles
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }

    // Règles pour la collection userReadings
    match /userReadings/{docId} {
      allow read, list: if request.auth != null && (
        // L'utilisateur peut lire ses propres lectures
        resource.data.userId == request.auth.uid ||
        // Les journalistes peuvent lire les lectures de leurs articles
        (isJournalist() && exists(/databases/$(database)/documents/articles/$(resource.data.articleId)) &&
         get(/databases/$(database)/documents/articles/$(resource.data.articleId)).data.authorName == request.auth.token.name)
      );
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll([
          'userId', 
          'articleId', 
          'readAt'
        ]) &&
        request.resource.data.userId is string &&
        request.resource.data.articleId is string &&
        request.resource.data.readAt is timestamp;

      allow update: if request.auth != null && (
        // L'utilisateur peut mettre à jour ses propres lectures
        resource.data.userId == request.auth.uid ||
        // Les journalistes peuvent mettre à jour les lectures de leurs articles
        (isJournalist() && exists(/databases/$(database)/documents/articles/$(resource.data.articleId)) &&
         get(/databases/$(database)/documents/articles/$(resource.data.articleId)).data.authorName == request.auth.token.name)
      );

      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }

		// Règles pour la collection favorites
    match /favorites/{favoriteId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         // Permettre aux journalistes de compter les likes sur leurs articles
         (request.auth.token.email_verified && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist'));
      allow list: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Règles pour la collection articles
    match /articles/{articleId} {
      allow read: if true; // Permet la lecture publique des articles
      // Permettre l'écriture uniquement aux administrateurs et journalistes
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }

    
    // NOUVELLE RÈGLE POUR LA COLLECTION PODCASTS
    match /podcasts/{podcastId} {
      allow read: if true; // Permet la lecture publique
      // Permettre l'écriture uniquement aux administrateurs et journalistes
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }
    
    // RÈGLE POUR LA COLLECTION JOBS (OFFRES D'EMPLOI)
    match /jobs/{jobId} {
      allow read: if true; // Permet la lecture publique des offres d'emploi
      // Permettre l'écriture uniquement aux administrateurs et journalistes
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }

    // Règles pour la collection contactSubmissions
    match /contactSubmissions/{submissionId} {
      // Permettre la création de documents par des utilisateurs non authentifiés
      allow create: if
        // Vérifier que tous les champs requis sont présents et du bon type
        request.resource.data.keys().hasAll(['name', 'email', 'theme', 'subject', 'message', 'timestamp', 'status']) &&
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0 && 
        request.resource.data.name.size() <= 100 &&
        request.resource.data.email is string && 
        request.resource.data.theme is string && 
        request.resource.data.subject is string && 
        request.resource.data.subject.size() > 0 && 
        request.resource.data.subject.size() <= 200 &&
        request.resource.data.message is string && 
        request.resource.data.message.size() > 0 && 
        request.resource.data.message.size() <= 5000 &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.status == 'open';

      // Permettre la lecture et la mise à jour uniquement aux administrateurs et journalistes
      allow read, update: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');

      // Permettre la suppression uniquement aux administrateurs
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Règles par défaut : tout bloquer
    match /{document=**} {
      allow read, write: if false;
    }
  }
}