rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction helper pour vérifier l'email
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }

    // Permettre la lecture/écriture pour les utilisateurs authentifiés
    match /users/{userId} {
      // Lecture : uniquement si l'email est vérifié ou admin/journalist
      allow read: if request.auth != null && 
        (isEmailVerified() || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');

      // Création : autorisée lors de l'inscription (sans vérification d'email)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Mise à jour : uniquement si l'email est vérifié (sauf admin/journalist)
      allow update: if request.auth != null && request.auth.uid == userId && 
        (isEmailVerified() || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');

      // Suppression : uniquement si l'email est vérifié (sauf admin/journalist)
      allow delete: if request.auth != null && request.auth.uid == userId && 
        (isEmailVerified() || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }

    // Allow authenticated users to manage their own liked articles
    match /users/{userId}/likedArticles/{articleId} {
      allow read, create, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Règles pour la collection articles
    match /articles/{articleId} {
      allow read: if true;  // Tout le monde peut lire les articles
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }

    // Règles pour la collection userReadings
    match /userReadings/{docId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll([
          'userId', 
          'articleId', 
          'readAt',
          'actualReadTime',
          'completionPercentage',
          'lastPosition'
        ]) &&
        request.resource.data.userId is string &&
        request.resource.data.articleId is string &&
        request.resource.data.readAt is timestamp &&
        request.resource.data.actualReadTime is number &&
        request.resource.data.actualReadTime >= 0 &&
        request.resource.data.completionPercentage is number &&
        request.resource.data.completionPercentage >= 0 &&
        request.resource.data.completionPercentage <= 100 &&
        request.resource.data.lastPosition is number &&
        request.resource.data.lastPosition >= 0 &&
        request.resource.data.lastPosition <= 100;

      allow update: if request.auth != null &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.articleId == resource.data.articleId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['actualReadTime', 'completionPercentage', 'lastPosition', 'readAt']);

      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }

    // Règles pour la collection favorites
    match /favorites/{favoriteId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // NOUVELLE RÈGLE POUR LA COLLECTION PODCASTS
    match /podcasts/{podcastId} {
      allow read: if true; // Permet la lecture publique
      // Permettre l'écriture uniquement aux administrateurs et journalistes
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');
    }

    // Nouvelles règles pour la collection contactSubmissions
    match /contactSubmissions/{submissionId} {
      // Permettre la création de documents par des utilisateurs non authentifiés
      allow create: if
        // Vérifier que tous les champs requis sont présents et du bon type
        request.resource.data.keys().hasAll(['name', 'email', 'theme', 'subject', 'message', 'timestamp', 'status']) &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 100 &&
        request.resource.data.email is string && request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        request.resource.data.theme is string && request.resource.data.theme in ['proposition-article', 'correction-suggestion', 'collaboration', 'question-generale', 'abonnement-suivi', 'recommandation-lecture', 'invitation-evenement', 'partenariat-communication', 'probleme-technique', 'autre'] &&
        request.resource.data.subject is string && request.resource.data.subject.size() > 0 && request.resource.data.subject.size() <= 200 &&
        request.resource.data.message is string && request.resource.data.message.size() > 0 && request.resource.data.message.size() <= 5000 &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.status == 'pending';

      // Permettre la lecture et la mise à jour uniquement aux administrateurs et journalistes
      allow read, update: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'journalist');

      // Empêcher la suppression des soumissions
      allow delete: if false;
    }
  }
}
